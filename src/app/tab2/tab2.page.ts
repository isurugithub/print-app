import { Component } from '@angular/core';
import { Printer } from '@capawesome-team/capacitor-printer';
import { ToastController } from '@ionic/angular';

@Component({
  selector: 'app-tab2',
  templateUrl: 'tab2.page.html',
  styleUrls: ['tab2.page.scss']
})
export class Tab2Page {

  public name: string | undefined;
  public html: string | undefined =
    '<html><body><h1>Hello World</h1></body></html>';
  public msg = '';

  constructor(private toastController: ToastController) {}
 
  public async checkPrinterAvailability(): Promise<void> {
    // await Printer.printHtml({ name: this.name, html: this.html || '' });
  }

  public async printHtml(): Promise<void> {
    try {
      // Define test content for the print job
      const testContent = `
        <div style="text-align: center; font-family: Arial, sans-serif;">
          <h1>Test Print</h1>
          <p>This is a test page generated by the Capacitor Printer plugin.</p>
          <p>Make sure your printer settings are correct.</p>
        </div>
      `;
  
      // Call the Printer plugin to print the test content
      await Printer.printHtml({
        name: this.name,
        html: testContent || this.html || '' // Specify HTML content type
      });

      console.log('Print job sent successfully.');
      this.presentSuccessToast('Print job sent successfully.');
    } catch (error) {
      console.error('Print job failed:', error);
      this.presentErrorToast('Print job failed : '+error);
    }
  }

  public async printText(): Promise<void> {
    try {
      // Define plain text content for the print job
      const textContent = 'This is a test message for printing plain text using the Capacitor Printer plugin.';
  
      // Call the Printer plugin to print the plain text content
      await Printer.printHtml({
        name: this.name,
        html: textContent // Specify HTML content type
      });
  
      console.log('Print job sent successfully.');
      this.presentSuccessToast('Print job sent successfully.');
    } catch (error) {
      this.presentErrorToast('Print job failed : '+error);
      console.error('Print job failed:', error);
    }
  }

  async presentErrorToast(message: string = '', position: 'top' | 'middle' | 'bottom' = 'top') {
    const toast = await this.toastController.create({
      message: message,
      duration: 2000,
      color: 'danger',
      position: position,
    });

    await toast.present();
  }

  async presentSuccessToast(message: string = '', position: 'top' | 'middle' | 'bottom' = 'top') {
    const toast = await this.toastController.create({
      message: message,
      duration: 2000,
      color: 'success',
      position: position,
    });

    await toast.present();
  }

}